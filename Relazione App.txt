Relazione Applicazione R2Pi0

1- Introduzione
2- Classi
3- Interazioni

1- INTRODUZIONE

La nostra riproduzione di R2-D2 necessita di un controller remoto per i movimenti e le interazioni base,
per questo noi abbiamo deciso di utilizzare un'applicazione programmata ad hoc per smartphone

L'applicazione e' scritta in Java per sistema operativo Android fino alla versione 5.1.1.
Per la connessione si basa su una comunicazione bluetooth, che per ragioni di componentistica
sara' la versione 2.0.

Partendo dalla parte visiva, l'applicazione e' costituita da elementi grafici per l'interazione con il robot,
che permettono:
- il controllo del movimento tramite un joystick virtuale
- l'attivazione della connessione bluetooth con la macchina
- l'invio di una richiesta per la riproduzione di suoni
- l'attivazione dei comandi vocali
- lo spegnimento completo del robot

[Inserimento di uno screenshoot dell'app]

2- CLASSI

Le classi che compongono l'applicazione e che permettono tutte le interazioni sono:
- MainActivity
- BluetoothComunication
- JoyStickView
- JoyStickTranslator
- JoyStickTrigonometricTranslator
- VocalTranslator

La classe MainActivity rappresenta l'activity principale dell'applicazione, l'unica schermata con la quale interaggiremo. 
Il suo compito e' quello di instanziare i pulsanti e il joystick, che permettono il movimento e l'utilizzo delle funzioni del robot.
In questa classe creaiamo un oggetto BluetoothConnection che ci permettera' l'invio dei vari comandi legati ad ogni pulsante, cio' avviene richiamando nei metodi setOnClickListener dei vari elementi della MainActivity l'oggetto del tipo BluetoothConnection che richaima il metodo scritto nella medesima classe.

La gestione dei comandi vocali avviene direttamente nella MainActivity, che ci permette di non dover creare una nuova activity per la gestione di questa funzione. Viene quindi creata una funzione startSpeechToText che avvia un Intent che inzia a catturare l'audio dal microfono per poi convertirlo tramite i servizi google in testo e salvarlo in una variabile dal metodo onActivityResult, da tale messaggio verra' poi estratto il comando tramite l'oggetto translatore della classe VocalTranslator e inviato tramite Bluetooth al robot.

---

La classe BluetoothComunication implementa le classi android per la gestione dei moduli e connessioni bluetooth, in particolare
vengono utilizzate le classi BluetoothAdapter, per creare un oggetto adattatore che ci consentira' di connetterci al robot, BluetoothDevice, che ci servira' per elencare tutti i dispositivi ai quali il nostro smartphone e' associato, e BluetoothSocket, che sara' necessario per instaurare la connesione.
Affinche' ci possa essere la connesione e' necessario effettuare l'associazione tra la parte di programma Python residente su Raspberry e la parte Java su Android manualmente, da riga di comando, successivamente il Raspberry verra' visualizzato nell'elenco dei dispositivi associati allo smartphone e bastera' selezionarlo nella finestra di Intent che compare premendo il pulsante per la connessione Bluetooth.
La classe inoltre prevede la gestione degli errori dovuti all'utilizzo su dispositivi senza Bluetooth e le eventuali perdite della connessione Bluetooth tra smartphone e Raspberry. Sono poi implementate tutte le funzioni per inviare i comandi al robot.

---

La classe VocalTranslator ha il compito di ricercare, nelle frasi ritornate dal servizio di riconoscimento vocale, le parole chiave che ci permettono di inviare i comandi al robot.
I comandi che sono implementati nei comandi vocali sono:
- seguimi;
- rotazione destra e sinistra;
- interruzione della musica;
Possono essere interpretati sia in lingua italiana che inglese e in diverse forme.

Nel caso dell'inserimento di un comando non riconosciuto il robot emettera' un segnale acustico di errore.

---













